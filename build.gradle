buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0-rc4'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'

    }
}
apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
}

dependencies {
    compile 'com.android.support:support-v4:21.0.2'
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.2'

    compile 'com.google.android.gms:play-services-base:6.5.+'
    compile 'com.google.android.gms:play-services-wearable:6.5.+'
    compile 'com.google.android.apps.dashclock:dashclock-api:+'
    compile 'com.vandalsoftware.android:dslv:+'
    compile project(':android-websockets')
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        versionCode 24
        versionName "1.15"
        minSdkVersion 9
        targetSdkVersion 21
        applicationId "com.irccloud.android"
        testApplicationId "com.irccloud.android.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"

        resConfigs "en"
    }

    signingConfigs {
        release {
            if(rootProject.file('keystore.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            buildConfigField "String", "HOST", "\"api.irccloud.com\""
            versionNameSuffix "-" + getRevision()
            buildConfigField "boolean", "ENTERPRISE", "false"
            if(rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('private.properties')))
                buildConfigField "String", "GCM_ID", "\"" + props['GCM_ID'] + "\""
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
                buildConfigField "String", "MASHAPE_KEY", "\"" + props['MASHAPE_KEY'] + "\""
                manifestPlaceholders = [CRASHLYTICS_KEY:props['CRASHLYTICS_KEY']]
            } else {
                buildConfigField "String", "GCM_ID", "\"\""
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                buildConfigField "String", "MASHAPE_KEY", "\"\""
                manifestPlaceholders = [CRASHLYTICS_KEY:""]
            }
            buildConfigField "String", "SSL_CN", "\"CN=*.irccloud.com,\""
            buildConfigField "String", "SSL_FP", "\"8D3BE1983F75F4A4546F42F5EC189BC65A9D3A42\""
            resValue "string", "IMAGE_SCHEME", "irccloud-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-images"
            resValue "string", "DISMISS_NOTIFICATION", "com.irccloud.android.DISMISS_NOTIFICATION"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.ACTION_REPLY"
            resValue "string", "app_name", "IRCCloud"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud"

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        release {
            buildConfigField "String", "HOST", "\"api.irccloud.com\""
            buildConfigField "String", "SSL_FP", "\"8D3BE1983F75F4A4546F42F5EC189BC65A9D3A42\""
            buildConfigField "boolean", "ENTERPRISE", "false"
            if(rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('private.properties')))
                buildConfigField "String", "GCM_ID", "\"" + props['GCM_ID'] + "\""
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
                buildConfigField "String", "MASHAPE_KEY", "\"" + props['MASHAPE_KEY'] + "\""
                manifestPlaceholders = [CRASHLYTICS_KEY:props['CRASHLYTICS_KEY']]
            } else {
                buildConfigField "String", "GCM_ID", "\"\""
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                buildConfigField "String", "MASHAPE_KEY", "\"\""
                manifestPlaceholders = [CRASHLYTICS_KEY:""]
            }
            buildConfigField "String", "SSL_CN", "\"CN=*.irccloud.com,\""
            resValue "string", "IMAGE_SCHEME", "irccloud-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-images"
            resValue "string", "DISMISS_NOTIFICATION", "com.irccloud.android.DISMISS_NOTIFICATION"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.ACTION_REPLY"
            resValue "string", "app_name", "IRCCloud"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud"

            if(rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        enterprisedebug {
            applicationIdSuffix ".enterprise"
            versionNameSuffix "-" + getRevision()
            buildConfigField "String", "HOST", "\"\""
            buildConfigField "boolean", "ENTERPRISE", "true"
            if(rootProject.file('enterprise.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('enterprise.properties')))
                buildConfigField "String", "GCM_ID", "\"" + props['GCM_ID'] + "\""
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
                buildConfigField "String", "MASHAPE_KEY", "\"" + props['MASHAPE_KEY'] + "\""
                manifestPlaceholders = [CRASHLYTICS_KEY:props['CRASHLYTICS_KEY']]
            } else {
                buildConfigField "String", "GCM_ID", "\"\""
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                buildConfigField "String", "MASHAPE_KEY", "\"\""
                manifestPlaceholders = [CRASHLYTICS_KEY:""]
            }
            buildConfigField "String", "SSL_CN", "\"\""
            buildConfigField "String", "SSL_FP", "\"\""
            resValue "string", "IMAGE_SCHEME", "irccloud-enterprise-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-enterprise-images"
            resValue "string", "DISMISS_NOTIFICATION", "com.irccloud.android.enterprise.DISMISS_NOTIFICATION"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.enterprise.ACTION_REPLY"
            resValue "string", "app_name", "IRCEnterprise"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud-enterprise"

            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        enterpriserelease {
            applicationIdSuffix ".enterprise"
            buildConfigField "String", "HOST", "\"\""
            buildConfigField "boolean", "ENTERPRISE", "true"
            if(rootProject.file('enterprise.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('enterprise.properties')))
                buildConfigField "String", "GCM_ID", "\"" + props['GCM_ID'] + "\""
                buildConfigField "String", "IMGUR_KEY", "\"" + props['IMGUR_KEY'] + "\""
                buildConfigField "String", "IMGUR_SECRET", "\"" + props['IMGUR_SECRET'] + "\""
                buildConfigField "String", "MASHAPE_KEY", "\"" + props['MASHAPE_KEY'] + "\""
                manifestPlaceholders = [CRASHLYTICS_KEY:props['CRASHLYTICS_KEY']]
            } else {
                buildConfigField "String", "GCM_ID", "\"\""
                buildConfigField "String", "IMGUR_KEY", "\"\""
                buildConfigField "String", "IMGUR_SECRET", "\"\""
                buildConfigField "String", "MASHAPE_KEY", "\"\""
                manifestPlaceholders = [CRASHLYTICS_KEY:""]
            }
            buildConfigField "String", "SSL_CN", "\"\""
            buildConfigField "String", "SSL_FP", "\"\""
            resValue "string", "IMAGE_SCHEME", "irccloud-enterprise-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-enterprise-images"
            resValue "string", "DISMISS_NOTIFICATION", "com.irccloud.android.enterprise.DISMISS_NOTIFICATION"
            resValue "string", "ACTION_REPLY", "com.irccloud.android.enterprise.ACTION_REPLY"
            resValue "string", "app_name", "IRCEnterprise"
            resValue "string", "IRCCLOUD_SCHEME", "irccloud-enterprise"

            if(rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDirs = ['src']
        main.resources.srcDirs = ['src']
        main.aidl.srcDirs = ['src']
        main.renderscript.srcDirs = ['src']
        enterprisedebug.res.srcDirs = ['enterprise-res']
        enterpriserelease.res.srcDirs = ['enterprise-res']
        main.res.srcDirs = ['res']
        main.assets.srcDirs = ['assets']

        androidTest {
            java.srcDirs = ['tests/src']
            res.srcDirs = ['tests/res']
            assets.srcDirs = ['tests/assets']
            resources.srcDirs = ['tests/src']
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

task __filteredResources(type:Copy) {
    from('res/') {
        exclude 'drawable-mdpi/ic_launcher.png'
        exclude 'drawable-hdpi/ic_launcher.png'
        exclude 'drawable-xhdpi/ic_launcher.png'
        exclude 'drawable-xxhdpi/ic_launcher.png'
        exclude 'drawable-xxxhdpi/ic_launcher.png'
        exclude 'drawable-mdpi/login_logo.png'
        exclude 'drawable-hdpi/login_logo.png'
        exclude 'drawable-xhdpi/login_logo.png'
        exclude 'drawable-xxhdpi/login_logo.png'
        exclude 'drawable-xxxhdpi/login_logo.png'
    }
    into 'build/filtered_resources'
    includeEmptyDirs = true
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mergeEnterprisedebugResources' || task.name == 'mergeEnterprisereleaseResources') {
        task.dependsOn __filteredResources
    }
}
